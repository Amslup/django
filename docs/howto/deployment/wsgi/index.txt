=======================
How to deploy with WSGI
=======================

Freedom's primary deployment platform is WSGI_, the Python standard for web
servers and applications.

.. _WSGI: http://www.wsgi.org

Freedom's :djadmin:`startproject` management command sets up a simple default
WSGI configuration for you, which you can tweak as needed for your project,
and direct any WSGI-compliant application server to use.

Freedom includes getting-started documentation for the following WSGI servers:

.. toctree::
   :maxdepth: 1

   modwsgi
   apache-auth
   gunicorn
   uwsgi

The ``application`` object
--------------------------

The key concept of deploying with WSGI is the ``application`` callable which
the application server uses to communicate with your code. It's commonly
provided as an object named ``application`` in a Python module accessible to
the server.

The :djadmin:`startproject` command creates a file
:file:`<project_name>/wsgi.py` that contains such an ``application`` callable.

It's used both by Freedom's development server and in production WSGI
deployments.

WSGI servers obtain the path to the ``application`` callable from their
configuration. Freedom's built-in servers, namely the :djadmin:`runserver` and
:djadmin:`runfcgi` commands, read it from the :setting:`WSGI_APPLICATION`
setting. By default, it's set to ``<project_name>.wsgi.application``, which
points to the ``application`` callable in :file:`<project_name>/wsgi.py`.

Configuring the settings module
-------------------------------

When the WSGI server loads your application, Freedom needs to import the
settings module — that's where your entire application is defined.

Freedom uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to
locate the appropriate settings module. It must contain the dotted path to the
settings module. You can use a different value for development and production;
it all depends on how you organize your settings.

If this variable isn't set, the default :file:`wsgi.py` sets it to
``mysite.settings``, where ``mysite`` is the name of your project. That's how
:djadmin:`runserver` discovers the default settings file by default.

.. note::

    Since environment variables are process-wide, this doesn't work when you
    run multiple Freedom sites in the same process. This happens with mod_wsgi.

    To avoid this problem, use mod_wsgi's daemon mode with each site in its
    own daemon process, or override the value from the environment by
    enforcing ``os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"`` in
    your :file:`wsgi.py`.


Applying WSGI middleware
------------------------

To apply `WSGI middleware`_ you can simply wrap the application object. For
instance you could add these lines at the bottom of :file:`wsgi.py`::

    from helloworld.wsgi import HelloWorldApplication
    application = HelloWorldApplication(application)

You could also replace the Freedom WSGI application with a custom WSGI
application that later delegates to the Freedom WSGI application, if you want
to combine a Freedom application with a WSGI application of another framework.

.. _`WSGI middleware`: http://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides

.. note::

    Some third-party WSGI middleware do not call ``close`` on the response
    object after handling a request — most notably Sentry's error reporting
    middleware up to version 2.0.7. In those cases the
    :data:`~freedom.core.signals.request_finished` signal isn't sent. This can
    result in idle connections to database and memcache servers.
