====================
Overriding Templates
====================

Overriding from the project's templates directory
=================================================

To override templates from a package in ``django.contrib`` or from a third-party
package, a common method is to create replacement templates in your
project's templates directory.

Let's say you're trying to override the templates for a third-party package
called ``blog``, which provides the templates ``blog/post.html`` and
``blog/list.html``. The relevant settings for your project would look like::

    INSTALLED_APPS = [
        ...,
        blog,
        ...,
    ]

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            ...
        },
    ]

The :setting:`TEMPLATES` setting here will already exist if you created your
project using the default project template. The setting that needs to be
modified is :setting:`DIRS<TEMPLATES-DIRS>`.

These settings assume you have a ``templates`` directory in the root of your
project. To override the templates for the ``blog`` app, create a folder
in the ``templates`` directory, and add the correct files to that folder::

    templates/
        blog/
            list.html
            post.html

The template loader first looks for the ``blog`` app templates in the ``DIRS``
directory. When the views in the ``blog`` app ask for the ``blog/post.html`` and
``blog/list.html`` templates, the loader will return your project's copy of the
templates.

Overriding from an app's template directory
===========================================

Since you're overriding templates that exist outside one of your project's apps,
it's somewhat cleaner to have the override templates in the project's template
directory, rather than an app template directory. If you'd prefer to have the
overrides in the app template directory, that's still possible.

First, make sure your template settings are checking inside app directories::

    TEMPLATES = [
        {
            ...,
            'APP_DIRS': True,
            ...
        },
    ]

Similar to the example from the previous section, if the app we're working on is
called ``myapp`` and the app we're trying to override is named ``blog``, then
our directory structure will look like::

    myapp/
        ...
        templates/
            blog/
                list.html
                post.html

With :setting:`APP_DIRS<TEMPLATES-APP_DIRS>` set to ``True`` and the correct
folder structure and templates, the template loader will look in the app's
templates directory, find ``blog/list.html`` and ``blog/post.html``, and return
those.

.. admonition:: Template loader ordering

    If you have app and project templates directories that both contain
    overrides , the default Django template loader will attempt to load the
    template from the project-level directory first. ``DIRS`` will be searched
    before ``APP_DIRS``.
