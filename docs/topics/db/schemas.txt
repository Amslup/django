=======
Schemas
=======

Some database support the concept of 'namespaces' by optionally prepending
the table name with a schema name.  This is not to be confused with an actual
database schema, this is a schema object within the database.

The exact rules for schema objects are database specific, and you should
consult your database documentation for the details.  But the general rule
is that the schema name is prepended to the table name if needed and the
two are separated by a period (or dot).

In other words, if there is a schema names 'my_schema', it can contain other
database objects potentially with their own access rules.  If one of those
objects is a table with the name 'my_table', you would refer to this table as
'my_schema.my_table'.  Other schemas can contain identically names objects,
and to avoid ambiguity you have to prepend the schema name to the table name.

There are database-specific exceptions to this rule, and variations, that
you should familiarize yourself with before using this feature.

.. _`postgres schema`: https://www.postgresql.org/docs/9.6/static/ddl-schemas.html

.. _`oracle schema`: http://docs.oracle.com/database/122/CNCPT/tables-and-table-clusters.htm#CNCPT88800

.. warning::
    Schema object are currently implemented only for Postgresql.
    By using table names that include schema names (as explained
    before) tables wil be created and manipulated within the specified
    schema.  Since the seperating period cannot be expressed in the
    class name, you have to use the Meta class with a db_table
    attribute that specifies the fully qualified table name (that
    includes the schema name).


Declaring a schema for tables
=============================

A schema can be specified for the table generated by a model by supplying
the :attr:`~django.db.models.Options.db_table` option inside the model's
``class Meta``.  By providing a qualified table name, for example
``my_schema.my_table`` the schema will be automatically created if it doesn't
exist yet and the table will be created within the given schema.

Without providing a schema qualifier, tables will be created in the default
schema as specified for that database.

An example
==========

.. code-block:: python

    class TableschemaExample(models.Model):
        my_id = models.IntegerField()

        class Meta:
            db_table = "my_schema.my_table"

In this example, the table ``my_table`` will be created within the
``my_schema`` schema, and all references to the table will have to be fully
qualified as ``my_schema.my_table``.

Database support
================

Currently Django only supports PostGreSQL schema objects.

When you use a backend that lacks support for schemas, Django ignores all
schema-related options.
