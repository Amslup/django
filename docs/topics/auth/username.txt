.. _username-validation:

=============================
Username Validation in Django
=============================

.. module:: django.contrib.auth.username_validation

.. versionadded:: 3.2

Django offers pluggable username validation. You can configure multiple
username validators at the same time. A few validators are included in 
Django, but you can write your own as well.

Each username validator must provide a help text to explain the requirements to
the user, validate a given username and return an error message if it does not
meet the requirements. Validators can also have optional settings to fine tune
their behavior.

Validation is controlled by the :setting:`AUTH_USERNAME_VALIDATORS` setting.
The default for the setting is a 
:class:`~django.contrib.auth.validators.UnicodeUsernameValidator` which
validates whether the given username contains only letters, numbers and
``@``, ``.``, ``+``, ``-``, ``_`` characters.

By default, validators are used in the forms and in the
:djadmin:`createsuperuser` management commands.

Enabling username validation
----------------------------

Username validation is configured in the
:setting:`AUTH_USERNAME_VALIDATORS` setting::

    AUTH_USERNAME_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.validators.UnicodeUsernameValidator',
        },
        {
            'NAME': 'django.contrib.auth.validators.UsernameMinimumLengthValidator',
            'OPTIONS':{
                'input_value': 3,
                'message': 'Password is too short.'
            }
        }
    ]

This example enables two included validators:

* ``UnicodeUsernameValidator``, which checks whether the username contains
  anything other than the letters, numbers and ``@``, ``.``, ``+``,
  ``-``, ``_``.
* ``UsernameMinimumLengthValidator``, which checks whether the username meets a minimum
  length. This validator is configured to enforce a minimum length of three characters.
  The ``limit_value`` parameter is used to to validate minimum length of the given 
  username.

The help texts and any errors from username validators are always returned in
the order they are listed in :setting:`AUTH_USERNAME_VALIDATORS`.

Included validators
-------------------

Django includes three validators:

.. class:: UnicodeUsernameValidator

    Validates whether the username contains Unicode characters, in addition
    to ``@``, ``.``, ``+``, ``-``, and ``_``. This is the default validator.

.. class:: ASCIIUsernameValidator

    Validates whether the username contains ASCII letters, in addition
    to ``@``, ``.``, ``+``, ``-``, and ``_``. 

.. class:: UsernameMinimumLengthValidator(limit_value, message=None)

    .. versionadded:: 3.2

    Validates whether the username meets a minimum length using 
    ``limit_value``. This validator is extended from 
    ``django.core.validators.MinLengthValidator``. The text given in ``message``
    is displayed when validation fails.

Integrating validation
----------------------

There are a few functions in ``django.contrib.auth.username_validation`` that
you can call from your own forms or other code to integrate username
validation.

.. function:: username_validators_help_texts(username_validators=None)

    .. versionadded:: 3.2

    Returns a string of the help texts of all validators. These explain the
    username requirements to the user.

.. function:: username_validators_help_text_html(username_validators=None)

    .. versionadded:: 3.2

    Returns an HTML string with all the text in an ``<ul>``. This is
    helpful when adding username validation to forms, as you can pass the
    output directly to the ``help_text`` parameter of a form field.

Writing your own validator
--------------------------

If Django's built-in validators are not sufficient for your requirements,
you can write your own username validators. Validators have a fairly small
interface. They must must implement two methods.

* ``__call__(self, username)``: validate a username. Return ``None`` if the
  username is valid, or raise a 
  :exc:`~django.core.exceptions.ValidationError` with an error message if the
  username is not valid.
* ``help_text(self)``: provide a help text to explain the requirements to
  the user.

Any items in the ``OPTIONS`` in :setting:`AUTH_USERNAME_VALIDATORS` for your
validator will be passed to the constructor. All constructor arguments should
have a default value.

Here's a basic example of a validator. This validator extends 
``django.core.validators.MinLengthValidator``::

    from django.core import validators
    from django.utils.translation import ngettext 

    class UsernameMinimumLengthValidator(validators.MinLengthValidator):
                
        def help_text(self):
            return ngettext(
                'Your username must contain at least %(limit_value)d
                character.','Your username must contain at least 
                %(limit_value)d characters.',
                self.limit_value
            ) % {'limit_value': self.limit_value}
