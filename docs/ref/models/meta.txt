===================
Model ``_meta`` API
===================

.. module:: django.db.models.options
   :synopsis: Model meta-class layer

.. class:: Options

The Model ``_meta`` API is at the core of Django. It enables other parts of the
system such as lookups, queries, forms, and the admin to understand the
capabilities of each model. The API is accessible through the ``_meta``
attribute of each model class. It's a ``django.db.models.options.Options``
object.

Methods that it provides can be used for:

* Retrieving all field instances of a model
* Retrieving a single field instance of a model by name

.. _model-meta-field-apis:

``Field-access APIs``
=====================

Retrieving a single field instance of a model by name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_field(field_name)

    Returns the field instance given a name of a field.

    ``field_name`` can be the name of a field on the model, a field
    on an abstract or inherited model, or a field defined on another
    model that points to the model. In the latter case, the ``field_name``
    will be the ``related_name`` defined by the user, or automatically
    generated by Django itself.

    Hidden fields are not available, because by definition they should
    not be looked up.

    If a field with the given name is not found a ``FieldDoesNotExist``
    exception will be raised.

    .. code-block:: python

        >>> from django.contrib.auth.models import User

        # A field on the model
        >>> User._meta.get_field('username')
        <django.db.models.fields.CharField: username>

        # A field from another model, that has a relation with the current model
        >>> User._meta.get_field('logentry')
        <RelatedObject: admin:logentry related to user>

        # A non existent field
        >>> User._meta.get_field('does_not_exist')
        Traceback (most recent call last):
            ...
        FieldDoesNotExist: User has no field named 'does_not_exist'

    .. versionchanged:: 1.8

        :meth:`Options.get_field()` does not accept a ``many_to_many``
        flag any more. This method will automatically search through 
        ``ManyToManyField`` instances, with no way to exclude them.
        If you wish to filter out M2M fields, you can do further filtering
        using the :ref:`field attributes <field-attributes>`.

Retrieving all field instances of a model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_fields(include_parents=True, include_hidden=False)

    .. versionadded:: 1.8

    Returns a list of fields given a specific search criteria defined by
    the flags.

    ``get_fields()`` takes a set of flags as parameters and returns a tuple of
    field instances. ``get_fields()`` contains a number of field filters that
    allow the API to search in different ways.

    Available parameters are:

    ``include_parents``
        Searches recursively through all parents. If set to ``False`` it will
        only search for fields declared directly on the current model.
        Fields from models that directly inherit from abstract models or
        proxy classes are still local.

    ``include_hidden``
        If set to ``True``, ``get_fields()`` will also include fields that
        concretely exist, but that are used to back other field's functionality.
        This will also exclude any fields that have a ``related_name`` argument
        (such as :class:`django.db.models.ManyToManyField`, or
        :class:`django.db.models.ForeignKey`) that starts with a "+".

    .. code-block:: python

        >>> User._meta.get_fields()
        (<django.db.models.fields.AutoField: id>,
         <django.db.models.fields.CharField: password>,
         <django.db.models.fields.DateTimeField: last_login>,
         <django.db.models.fields.BooleanField: is_superuser>,
         <django.db.models.fields.CharField: username>,
         <django.db.models.fields.CharField: first_name>,
         <django.db.models.fields.CharField: last_name>,
         <django.db.models.fields.EmailField: email>,
         <django.db.models.fields.BooleanField: is_staff>,
         <django.db.models.fields.BooleanField: is_active>,
         <django.db.models.fields.DateTimeField: date_joined>,
         <RelatedObject: admin:logentry related to user>,)

        # Include also hidden fields, there are rare occasion in which you
        # might want to do this.
        >>> User._meta.get_fields(include_hidden=True)
        (<django.db.models.fields.AutoField: id>,
         <django.db.models.fields.CharField: password>,
         <django.db.models.fields.DateTimeField: last_login>,
         <django.db.models.fields.BooleanField: is_superuser>,
         <django.db.models.fields.CharField: username>,
         <django.db.models.fields.CharField: first_name>,
         <django.db.models.fields.CharField: last_name>,
         <django.db.models.fields.EmailField: email>,
         <django.db.models.fields.BooleanField: is_staff>,
         <django.db.models.fields.BooleanField: is_active>,
         <django.db.models.fields.DateTimeField: date_joined>,
         <RelatedObject: auth:user_groups related to user>,
         <RelatedObject: auth:user_user_permissions related to user>,
         <RelatedObject: admin:logentry related to user>,)
