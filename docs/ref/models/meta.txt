===================
Model ``_meta`` API
===================

.. module:: django.db.models.options
   :synopsis: Model meta-class layer

.. class:: Options

The Model ``_meta`` API is at the core of the Django ORM. It enables other
parts of the system such as lookups, queries, forms, and the admin to
understand the capabilities of each model. The API is accessible through
the ``_meta`` attribute of each model class, which is an instance of an
``django.db.models.options.Options`` object.

Methods that it provides can be used to:

* Retrieve all field instances of a model
* Retrieve a single field instance of a model by name

.. note::
    The Model ``_meta`` API has always existed as a Django internal, but
    wasn't formally documented and supported. As part of the effort to
    make this API public, some of the already existing API entrypoints
    may have slightly changed.

.. _model-meta-field-apis:

``Field-access APIs``
=====================

Retrieving a single field instance of a model by name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_field(field_name)

    Returns the field instance given a name of a field.

    ``field_name`` can be the name of a field on the model, a field
    on an abstract or inherited model, or a field defined on another
    model that points to the model. In the latter case, the ``field_name``
    will be the ``related_name`` defined by the user, or automatically
    generated by Django itself.

    Hidden fields cannot be retrieved by name.

    If a field with the given name is not found a ``FieldDoesNotExist``
    exception will be raised.

    .. code-block:: python

        >>> from django.contrib.auth.models import User

        # A field on the model
        >>> User._meta.get_field('username')
        <django.db.models.fields.CharField: username>

        # A field from another model, that has a relation with the current model
        >>> User._meta.get_field('logentry')
        <ManyToOneRel: admin.logentry>

        # A non existent field
        >>> User._meta.get_field('does_not_exist')
        Traceback (most recent call last):
            ...
        FieldDoesNotExist: User has no field named 'does_not_exist'

    .. versionchanged:: 1.8

        In versions of Django prior to 1.8, :meth:`Options.get_field()`
        existed, and accepted a ``many_to_many`` flag. The use of the flag
        has been deprecated. Many-to-many fields are treated the same as
        any other field by :meth:`Options.get_field()`; if you want to ensure
        that a field is (or isn't) a many-to-many field, you can use
        :ref:`field attributes <field-attributes>` to check the properties of
        the field.

Retrieving all field instances of a model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_fields(include_parents=True, include_hidden=False)

    .. versionadded:: 1.8

    Returns a list of fields associated with a model. ``get_fields()`` accepts
    two parameters that can be used to control which fields are returned:

    ``include_parents``
        ``True`` by default. Recursively includes fields defined on parent
        classes. If set to ``False``, ``get_fields()`` will only search for
        fields declared directly on the current model. Fields from models that
        directly inherit from abstract models or proxy classes are considered
        to be local, not on the parent.

    ``include_hidden``
        ``False`` by default. If set to ``True``, ``get_fields()`` will include
        fields that concretely exist, but that are used to back other field's
        functionality. This will includes any fields that have a ``related_name``
        (such as :class:`django.db.models.ManyToManyField`, or
        :class:`django.db.models.ForeignKey`) that starts with a "+".

    .. code-block:: python

        >>> User._meta.get_fields()
        (<django.db.models.fields.AutoField: id>,
         <django.db.models.fields.CharField: password>,
         <django.db.models.fields.DateTimeField: last_login>,
         <django.db.models.fields.BooleanField: is_superuser>,
         <django.db.models.fields.CharField: username>,
         <django.db.models.fields.CharField: first_name>,
         <django.db.models.fields.CharField: last_name>,
         <django.db.models.fields.EmailField: email>,
         <django.db.models.fields.BooleanField: is_staff>,
         <django.db.models.fields.BooleanField: is_active>,
         <django.db.models.fields.DateTimeField: date_joined>,
         <ManyToOneRel: admin.logentry>,)

        # Include also hidden fields, there are rare occasion in which you
        # might want to do this.
        >>> User._meta.get_fields(include_hidden=True)
        (<django.db.models.fields.AutoField: id>,
         <django.db.models.fields.CharField: password>,
         <django.db.models.fields.DateTimeField: last_login>,
         <django.db.models.fields.BooleanField: is_superuser>,
         <django.db.models.fields.CharField: username>,
         <django.db.models.fields.CharField: first_name>,
         <django.db.models.fields.CharField: last_name>,
         <django.db.models.fields.EmailField: email>,
         <django.db.models.fields.BooleanField: is_staff>,
         <django.db.models.fields.BooleanField: is_active>,
         <django.db.models.fields.DateTimeField: date_joined>,
         <ManyToOneRel: auth.user_groups>,
         <ManyToOneRel: auth.user_user_permissions>,
         <ManyToOneRel: auth.user_groups>,
         <ManyToOneRel: auth.user_user_permissions>,
         <ManyToOneRel: admin.logentry>,)
