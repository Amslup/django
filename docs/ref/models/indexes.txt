=====================
Model index reference
=====================

.. module:: django.db.models.indexes

.. currentmodule:: django.db.models

.. versionadded:: 1.11

Index classes ease creating database indexes. They can be added using the
:attr:`Meta.indexes <django.db.models.Options.indexes>` option. This document
explains the API references of :class:`Index` which includes the `index
options`_.

.. admonition:: Referencing built-in indexes

    Indexes are defined in ``django.db.models.indexes``, but for convenience
    they're imported into :mod:`django.db.models`. The standard convention is
    to use ``from django.db import models`` and refer to the indexes as
    ``models.<IndexClass>``.

``Index`` options
=================

.. class:: Index(fields=[], name=None, db_tablespace=None)

    Creates an index (B-Tree) in the database.

``fields``
----------

.. attribute:: Index.fields

A list of the name of the fields or database expressions on which the index is
desired.

By default, indexes are created with an ascending order for each column. To
define an index with a descending order for a column, add a hyphen before the
field's name. When using an expression, use ``.desc()`` for descending order.

For example ``Index(fields=['headline', '-pub_date'])`` would create SQL with
``(headline, pub_date DESC)``. Index ordering isn't supported on MySQL. In that
case, a descending index is created as a normal index.

``Index(fields=[Lower('title').desc()])`` would create an index on the
lowercase value of the ``title`` field in descending order. Using ``F``
expressions in a construct like ``Index(fields=[F('height') * F('weight')])``
allows constructing indexes on mathematical operations.

.. admonition:: Support for column ordering on SQLite

    Column ordering is supported on SQLite 3.3.0+ and only for some database
    file formats. Refer to the `SQLite docs
    <https://www.sqlite.org/lang_createindex.html>`_ for specifics.

.. admonition:: Database specific exceptions of suitable expressions

    :PostgreSQL:
        PostgreSQL requires that "*all functions and operators used in an index
        definition must be 'immutable'*" --- `PostgreSQL documentation
        <https://www.postgresql.org/docs/current/static/sql-createindex.html#AEN80057>`_.
        As a result, you can't use functions like :class:`~.functions.Concat`
        in a database index. If you do use such a function you'll get an error
        when applying a migration saying this:

        .. code-block:: text

            ERROR:  functions in index expression must be marked IMMUTABLE

    :MySQL:
        MySQL doesn't support expression indexes as of version 5.7.

    :SQLite3:
        "*The ability to index expressions was added to SQLite with version
        3.9.0 (2015-10-14)*" --- `SQLite3 documentation
        <https://sqlite.org/expridx.html#compatibility>`_.

    :Oracle:
        Oracle Database requires "*that any schema-level or package-level
        PL/SQL function that the index expression invokes is deterministic
        (that is, that the function always return the same result for the same
        input).*" --- `Oracle Database documentation
        <https://docs.oracle.com/database/121/ADFNS/adfns_indexes.htm#ADFNS257>`_.
        However, unlike PostgreSQL, "*Oracle Database does not check this
        assertion*".

.. versionadded:: 2.0

    Support for functional indexes was added.

``name``
--------

.. attribute:: Index.name

The name of the index. If ``name`` isn't provided Django will auto-generate a
name. For compatibility with different databases, index names cannot be longer
than 30 characters and shouldn't start with a number (0-9) or underscore (_).

``db_tablespace``
-----------------

.. attribute:: Index.db_tablespace

.. versionadded:: 2.0

The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for
this index. For single field indexes, if ``db_tablespace`` isn't provided, the
index is created in the ``db_tablespace`` of the field.

If :attr:`.Field.db_tablespace` isn't specified (or if the index uses multiple
fields), the index is created in tablespace specified in the
:attr:`~django.db.models.Options.db_tablespace` option inside the model's
``class Meta``. If neither of those tablespaces are set, the index is created
in the same tablespace as the table.

.. seealso::

    For a list of PostgreSQL-specific indexes, see
    :mod:`django.contrib.postgres.indexes`.
