=================
Class-based views
=================

.. versionadded:: 1.3

.. note::
    Prior to Django 1.3, class based views were implemented as functions. The
    function-based implementation has been removed in favor of the
    class-based approach described here.

Writing Web applications can be monotonous, because we repeat certain patterns
again and again. Django tries to take away some of that monotony at the model
and template layers, but Web developers also experience this boredom at the view
level.

A general introduction to class-based views can be found in the
:doc:`topic guide </topics/class-based-views>`.

This reference contains details of Django's built-in class based views, along with
a list of the keyword arguments that each class based view expects. Remember that
arguments may either come from the URL pattern or from the ``extra_context``
additional-information dictionary.

Fundamental class based views
=============================

The following three classes provide much of the functionality needed to create
Django views. You may think of them as *base* views, which can be used by
themselves or inherited from.  They may not provide all the capabilities required
for projects, in which case there are Mixins and Generic class based views.

Specification
-------------

Each request served by a class based view has an independent state; therefore,
it is safe to store state variables on the instance (i.e., ``self.foo = 3`` is
a thread-safe operation).

A class-based view is deployed into a URL pattern using the
:meth:`~View.as_view()` classmethod::

    urlpatterns = patterns('',
            (r'^view/$', MyView.as_view(size=42)),
        )

.. admonition:: Thread safety with view arguments

    Arguments passed to a view are shared between every instance of a view.
    This means that you shoudn't use a list, dictionary, or any other
    variable object as an argument to a view. If you did, the actions of
    one user visiting your view could have an effect on subsequent users
    visiting the same view.

Any argument passed into :meth:`~View.as_view()` will be assigned onto the
instance that is used to service a request. Using the previous example,
this means that every request on ``MyView`` is able to interrogate
``self.size``.

.. currentmodule:: django.views.generic.base

View
~~~~
.. class:: View()

    The master class-based base view. All other class-based views inherit from
    this base class.
    
    **Classpath**

    ``django.views.generic.base.View``
    
    **Methods**

    .. method:: dispatch(request, *args, **kwargs)

        The ``view`` part of the view -- the method that accepts a ``request``
        argument plus arguments, and returns a HTTP response.

        The default implementation will inspect the HTTP method and attempt to
        delegate to a method that matches the HTTP method; a ``GET`` will be
        delegated to :meth:`~View.get()`, a ``POST`` to :meth:`~View.post()`,
        and so on.

        The default implementation also sets ``request``, ``args`` and
        ``kwargs`` as instance variables, so any method on the view can know
        the full details of the request that was made to invoke the view.

    .. method:: http_method_not_allowed(request, *args, **kwargs)

        If the view was called with HTTP method it doesn't support, this method
        is called instead.

        The default implementation returns ``HttpResponseNotAllowed`` with list
        of allowed methods in plain text.

    **Example**::

        from django.views.generic.base import View

        class MyView(View):
            # TODO - find an actual example of this view
            pass

TemplateView
~~~~~~~~~~~~
.. class:: TemplateView()

    Renders a given template, passing it a ``{{ params }}`` template variable,
    which is a dictionary of the parameters captured in the URL.
    
    **Classpath**
    
    ``django.views.generic.base.TemplateView``    

    **Mixins**

    * :class:`django.views.generic.base.TemplateResponseMixin`
    
    **Methods and Attributes**

    .. attribute:: template_name

        The full name of a template to use.

    .. method:: get_context_data(**kwargs)

        Return a context data dictionary consisting of the contents of
        ``kwargs`` stored in the context variable ``params``.

    **Context**

    * ``params``: The dictionary of keyword arguments captured from the URL
      pattern that served the view.
      
      
    **Example**::

        from django.views.generic.base import TemplateView
        
        from articles.models import Article

        class HomePageView(TemplateView):

            template_name = "home.html"
            
            def get_context_data(self, **kwargs):
                context = super(HomePageView, self).get_context_data(**kwargs)
                context['latest_articles'] = Article.objects.all()[:5]
                return context

RedirectView
~~~~~~~~~~~~
.. class:: django.views.generic.base.RedirectView()

    Redirects to a given URL.

    The given URL may contain dictionary-style string formatting, which will be
    interpolated against the parameters captured in the URL. Because keyword
    interpolation is *always* done (even if no arguments are passed in), any
    ``"%"`` characters in the URL must be written as ``"%%"`` so that Python
    will convert them to a single percent sign on output.

    If the given URL is ``None``, Django will return an ``HttpResponseGone``
    (410).

    .. attribute:: url

        The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone)
        HTTP error.

    .. attribute:: permanent

        Whether the redirect should be permanent. The only difference here is
        the HTTP status code returned. If ``True``, then the redirect will use
        status code 301. If ``False``, then the redirect will use status code
        302. By default, ``permanent`` is ``True``.

    .. attribute:: query_string

        Whether to pass along the GET query string to the new location. If
        ``True``, then the query string is appended to the URL. If ``False``,
        then the query string is discarded. By default, ``query_string`` is
        ``False``.

    .. method:: get_redirect_url(**kwargs)

        Constructs the target URL for redirection.

        The default implementation uses :attr:`~RedirectView.url` as a starting
        string, performs expansion of ``%`` parameters in that string, as well
        as the appending of query string if requested by
        :attr:`~RedirectView.query_string`. Subclasses may implement any
        behavior they wish, as long as the method returns a redirect-ready URL
        string.

Generic views
=============

Most generic views require the ``queryset`` key, which is a ``QuerySet``
instance; see :doc:`/topics/db/queries` for more information about ``QuerySet``
objects.

Detail views
------------

.. currentmodule:: django.views.generic.detail

DetailView
~~~~~~~~~~
.. class:: BaseDetailView()
.. class:: DetailView()

    A page representing an individual object.

    While this view is executing, ``self.object`` will contain the object that
    the view is operating upon.

    :class:`~django.views.generic.base.BaseDetailView` implements the same
    behavior as :class:`~django.views.generic.base.DetailView`, but doesn't
    include the
    :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.detail.SingleObjectMixin`
    * :class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`

List views
----------

.. currentmodule:: django.views.generic.list

ListView
~~~~~~~~
.. class:: BaseListView()
.. class:: ListView()

    A page representing a list of objects.

    While this view is executing, ``self.object_list`` will contain the list of
    objects (usually, but not necessarily a queryset) that the view is
    operating upon.

    :class:`~django.views.generic.list.BaseListView` implements the same
    behavior as :class:`~django.views.generic.list.ListView`, but doesn't
    include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectMixin`
    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`


Editing views
-------------

.. currentmodule:: django.views.generic.edit

FormView
~~~~~~~~
.. class:: BaseFormView()
.. class:: FormView()

    A view that displays a form. On error, redisplays the form with validation
    errors; on success, redirects to a new URL.

    :class:`~django.views.generic.edit.BaseFormView` implements the same
    behavior as :class:`~django.views.generic.edit.FormView`, but doesn't
    include the :class:`~django.views.generic.base.TemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.edit.FormMixin`
    * :class:`django.views.generic.edit.ProcessFormView`

CreateView
~~~~~~~~~~
.. class:: BaseCreateView()
.. class:: CreateView()

    A view that displays a form for creating an object, redisplaying the form
    with validation errors (if there are any) and saving the object.

    :class:`~django.views.generic.edit.BaseCreateView` implements the same
    behavior as :class:`~django.views.generic.edit.CreateView`, but doesn't
    include the :class:`~django.views.generic.base.TemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.edit.ModelFormMixin`
    * :class:`django.views.generic.edit.ProcessFormView`

UpdateView
~~~~~~~~~~
.. class:: BaseUpdateView()
.. class:: UpdateView()

    A view that displays a form for editing an existing object, redisplaying
    the form with validation errors (if there are any) and saving changes to
    the object. This uses a form automatically generated from the object's
    model class (unless a form class is manually specified).

    :class:`~django.views.generic.edit.BaseUpdateView` implements the same
    behavior as :class:`~django.views.generic.edit.UpdateView`, but doesn't
    include the :class:`~django.views.generic.base.TemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.edit.ModelFormMixin`
    * :class:`django.views.generic.edit.ProcessFormView`

DeleteView
~~~~~~~~~~
.. class:: BaseDeleteView()
.. class:: DeleteView()

    A view that displays a confirmation page and deletes an existing object.
    The given object will only be deleted if the request method is ``POST``. If
    this view is fetched via ``GET``, it will display a confirmation page that
    should contain a form that POSTs to the same URL.

    :class:`~django.views.generic.edit.BaseDeleteView` implements the same
    behavior as :class:`~django.views.generic.edit.DeleteView`, but doesn't
    include the :class:`~django.views.generic.base.TemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.edit.DeletionMixin`
    * :class:`django.views.generic.detail.BaseDetailView`

    **Notes**

    * The delete confirmation page displayed to a GET request uses a
      ``template_name_suffix`` of ``'_confirm_delete'``.

Date-based views
----------------

Date-based generic views (in the module :mod:`django.views.generic.dates`)
are views for displaying drilldown pages for date-based data.

.. currentmodule:: django.views.generic.dates

ArchiveIndexView
~~~~~~~~~~~~~~~~
.. class:: BaseArchiveIndexView()
.. class:: ArchiveIndexView()

    A top-level index page showing the "latest" objects, by date. Objects with
    a date in the *future* are not included unless you set ``allow_future`` to
    ``True``.

    :class:`~django.views.generic.dates.BaseArchiveIndexView` implements the
    same behavior as :class:`~django.views.generic.dates.ArchiveIndexView`, but
    doesn't include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.dates.BaseDateListView`
    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`

    **Notes**

    * Uses a default ``context_object_name`` of ``latest``.
    * Uses a default ``template_name_suffix`` of ``_archive``.

YearArchiveView
~~~~~~~~~~~~~~~
.. class:: BaseYearArchiveView()
.. class:: YearArchiveView()

    A yearly archive page showing all available months in a given year. Objects
    with a date in the *future* are not displayed unless you set
    ``allow_future`` to ``True``.

    :class:`~django.views.generic.dates.BaseYearArchiveView` implements the
    same behavior as :class:`~django.views.generic.dates.YearArchiveView`, but
    doesn't include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`
    * :class:`django.views.generic.dates.YearMixin`
    * :class:`django.views.generic.dates.BaseDateListView`

    .. attribute:: make_object_list

        A boolean specifying whether to retrieve the full list of objects for
        this year and pass those to the template. If ``True``, the list of
        objects will be made available to the context. By default, this is
        ``False``.

    .. method:: get_make_object_list()

        Determine if an object list will be returned as part of the context. If
        ``False``, the ``None`` queryset will be used as the object list.

    **Context**

    In addition to the context provided by
    :class:`django.views.generic.list.MultipleObjectMixin` (via
    :class:`django.views.generic.dates.BaseDateListView`), the template's
    context will be:

    * ``date_list``: A ``DateQuerySet`` object containing all months that
      have objects available according to ``queryset``, represented as
      ``datetime.datetime`` objects, in ascending order.

    * ``year``: A ``datetime.date`` object representing the given year.

    * ``next_year``: A ``datetime.date`` object representing the first day
      of the next year. If the next year is in the future, this will be
      ``None``.

    * ``previous_year``: A ``datetime.date`` object representing the first
      day of the previous year. Unlike ``next_year``, this will never be
      ``None``.

    **Notes**

    * Uses a default ``template_name_suffix`` of ``_archive_year``.

MonthArchiveView
~~~~~~~~~~~~~~~~
.. class:: BaseMonthArchiveView()
.. class:: MonthArchiveView()

    A monthly archive page showing all objects in a given month. Objects with a
    date in the *future* are not displayed unless you set ``allow_future`` to
    ``True``.

    :class:`~django.views.generic.dates.BaseMonthArchiveView` implements
    the same behavior as
    :class:`~django.views.generic.dates.MonthArchiveView`, but doesn't
    include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`
    * :class:`django.views.generic.dates.YearMixin`
    * :class:`django.views.generic.dates.MonthMixin`
    * :class:`django.views.generic.dates.BaseDateListView`

    **Context**

    In addition to the context provided by
    :class:`~django.views.generic.list.MultipleObjectMixin` (via
    :class:`~django.views.generic.dates.BaseDateListView`), the template's
    context will be:

    * ``date_list``: A ``DateQuerySet`` object containing all days that
      have objects available in the given month, according to ``queryset``,
      represented as ``datetime.datetime`` objects, in ascending order.

    * ``month``: A ``datetime.date`` object representing the given month.

    * ``next_month``: A ``datetime.date`` object representing the first day
      of the next month. If the next month is in the future, this will be
      ``None``.

    * ``previous_month``: A ``datetime.date`` object representing the first
      day of the previous month. Unlike ``next_month``, this will never be
      ``None``.

    **Notes**

    * Uses a default ``template_name_suffix`` of ``_archive_month``.

WeekArchiveView
~~~~~~~~~~~~~~~
.. class:: BaseWeekArchiveView()
.. class:: WeekArchiveView()

    A weekly archive page showing all objects in a given week. Objects with a
    date in the *future* are not displayed unless you set ``allow_future`` to
    ``True``.

    :class:`~django.views.generic.dates.BaseWeekArchiveView` implements the
    same behavior as :class:`~django.views.generic.dates.WeekArchiveView`, but
    doesn't include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`
    * :class:`django.views.generic.dates.YearMixin`
    * :class:`django.views.generic.dates.MonthMixin`
    * :class:`django.views.generic.dates.BaseDateListView`

    **Context**

    In addition to the context provided by
    :class:`~django.views.generic.list.MultipleObjectMixin` (via
    :class:`~django.views.generic.dates.BaseDateListView`), the template's
    context will be:

    * ``week``: A ``datetime.date`` object representing the first day of
      the given week.

    * ``next_week``: A ``datetime.date`` object representing the first day
      of the next week. If the next week is in the future, this will be
      ``None``.

    * ``previous_week``: A ``datetime.date`` object representing the first
      day of the previous week. Unlike ``next_week``, this will never be
      ``None``.

    **Notes**

    * Uses a default ``template_name_suffix`` of ``_archive_week``.

DayArchiveView
~~~~~~~~~~~~~~
.. class:: BaseDayArchiveView()
.. class:: DayArchiveView()

    A day archive page showing all objects in a given day. Days in the future
    throw a 404 error, regardless of whether any objects exist for future days,
    unless you set ``allow_future`` to ``True``.

    :class:`~django.views.generic.dates.BaseDayArchiveView` implements the same
    behavior as :class:`~django.views.generic.dates.DayArchiveView`, but
    doesn't include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`
    * :class:`django.views.generic.dates.YearMixin`
    * :class:`django.views.generic.dates.MonthMixin`
    * :class:`django.views.generic.dates.DayMixin`
    * :class:`django.views.generic.dates.BaseDateListView`

    **Context**

    In addition to the context provided by
    :class:`~django.views.generic.list.MultipleObjectMixin` (via
    :class:`~django.views.generic.dates.BaseDateListView`), the template's
    context will be:

    * ``day``: A ``datetime.date`` object representing the given day.

    * ``next_day``: A ``datetime.date`` object representing the next day.
      If the next day is in the future, this will be ``None``.

    * ``previous_day``: A ``datetime.date`` object representing the
      previous day. Unlike ``next_day``, this will never be ``None``.

    * ``next_month``: A ``datetime.date`` object representing the first day
      of the next month. If the next month is in the future, this will be
      ``None``.

    * ``previous_month``: A ``datetime.date`` object representing the first
      day of the previous month. Unlike ``next_month``, this will never be
      ``None``.

    **Notes**

    * Uses a default ``template_name_suffix`` of ``_archive_day``.

TodayArchiveView
~~~~~~~~~~~~~~~~
.. class:: BaseTodayArchiveView()
.. class:: TodayArchiveView()

    A day archive page showing all objects for *today*. This is exactly the
    same as :class:`django.views.generic.dates.DayArchiveView`, except today's
    date is used instead of the ``year``/``month``/``day`` arguments.

    :class:`~django.views.generic.dates.BaseTodayArchiveView` implements the
    same behavior as :class:`~django.views.generic.dates.TodayArchiveView`, but
    doesn't include the
    :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`
    * :class:`django.views.generic.dates.BaseDayArchiveView`

DateDetailView
~~~~~~~~~~~~~~
.. class:: BaseDateDetailView()
.. class:: DateDetailView()

    A page representing an individual object. If the object has a date value in
    the future, the view will throw a 404 error by default, unless you set
    ``allow_future`` to ``True``.

    :class:`~django.views.generic.dates.BaseDateDetailView` implements the same
    behavior as :class:`~django.views.generic.dates.DateDetailView`, but
    doesn't include the
    :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`.

    **Mixins**

    * :class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`
    * :class:`django.views.generic.detail.BaseDetailView`
    * :class:`django.views.generic.dates.DateMixin`
    * :class:`django.views.generic.dates.YearMixin`
    * :class:`django.views.generic.dates.MonthMixin`
    * :class:`django.views.generic.dates.DayMixin`
