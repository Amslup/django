========================
django.contrib.humanize
========================

.. module:: django.contrib.humanize
   :synopsis: A set of Django template filters useful for adding a "human
              touch" to data.

A set of Django template filters useful for adding a "human touch" to data.

To activate these filters, add ``'django.contrib.humanize'`` to your
:setting:`INSTALLED_APPS` setting. Once you've done that, use
``{% load humanize %}`` in a template, and you'll have access to the following
filters.

.. templatefilter:: apnumber

apnumber
--------

For numbers 1-9, returns the number spelled out. Otherwise, returns the
number. This follows Associated Press style.

Examples:

* ``1`` becomes ``one``.
* ``2`` becomes ``two``.
* ``10`` becomes ``10``.

You can pass in either an integer or a string representation of an integer.

.. templatefilter:: intcomma

intcomma
--------

Converts an integer to a string containing commas every three digits.

Examples:

* ``4500`` becomes ``4,500``.
* ``45000`` becomes ``45,000``.
* ``450000`` becomes ``450,000``.
* ``4500000`` becomes ``4,500,000``.

:ref:`Format localization <format-localization>` will be respected if enabled,
e.g. with the ``'de'`` language:

* ``45000`` becomes ``'45.000'``.
* ``450000`` becomes ``'450.000'``.

You can pass in either an integer or a string representation of an integer.

.. templatefilter:: intword

intword
-------

Converts a large integer to a friendly text representation. Works best for
numbers over 1 million.

Examples:

* ``1000000`` becomes ``1.0 million``.
* ``1200000`` becomes ``1.2 million``.
* ``1200000000`` becomes ``1.2 billion``.

Values up to 10^100 (Googol) are supported.

**Argument:** intword can take a precision argument. Default is a precision
of 1, for example a precision of 2:

* ``1234000`` becomes ``1.23 million``.

:ref:`Format localization <format-localization>` will be respected if enabled,
e.g. with the ``'de'`` language:

* ``1000000`` becomes ``'1,0 Million'``.
* ``1200000`` becomes ``'1,2 Million'``.
* ``1200000000`` becomes ``'1,2 Milliarden'``.

You can pass in either an integer or a string representation of an integer.

.. templatefilter:: intabr

intabr
-------

Similar in nature to :tfilter:`intword` above, except returns common abbreviation
forms for large numbers:

Examples:

* ``1000000`` becomes ``1.0M``.

and with a precision of 2:

* ``1200000000`` becomes ``1.20B``.

Large Number Conversion
=======================


``intword_internal(precision=1, max_num=1000000, word_abr_symbol=0, converter=Converter)``

You can create other custom large number tags by using the function intword_internal.
For example, you can pass intword_internal a custom converter class if the built in
converter does not meet your needs.

The argument precision defines the rounding precision.

The argument max_num defines the number at which to apply the conversion. Numbers large than
max_num will be converted.

The argument word_abr_symbol in the function intword_internal can take 0, 1 or 2.

* ``0 returns a space with the full word not capitalized``.
* ``1 returns a capitalized common abbreviation of the large number``.
* ``2 returns the standardized metric prefix symbol for numbers up to 10^24 (Y)``.

For reference, see the `standardized metric prefix symbol <http://en.wikipedia.org/wiki/SI_prefix/>`_ guide.

To create a custom converter, view the code in contrib.humanize. Inhereting from Converter should solve
most problems.

.. templatefilter:: naturalday

naturalday
----------

For dates that are the current day or within one day, return "today",
"tomorrow" or "yesterday", as appropriate. Otherwise, format the date using
the passed in format string.

**Argument:** Date formatting string as described in the :tfilter:`date` tag.

Examples (when 'today' is 17 Feb 2007):

* ``16 Feb 2007`` becomes ``yesterday``.
* ``17 Feb 2007`` becomes ``today``.
* ``18 Feb 2007`` becomes ``tomorrow``.
* Any other day is formatted according to given argument or the
  :setting:`DATE_FORMAT` setting if no argument is given.

.. templatefilter:: naturaltime

naturaltime
-----------

.. versionadded:: 1.4

For datetime values, returns a string representing how many seconds,
minutes or hours ago it was -- falling back to a longer date format if the
value is more than a day old. In case the datetime value is in the future
the return value will automatically use an appropriate phrase.

Examples (when 'now' is 17 Feb 2007 16:30:00):

* ``17 Feb 2007 16:30:00`` becomes ``now``.
* ``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``.
* ``17 Feb 2007 16:29:00`` becomes ``a minute ago``.
* ``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``.
* ``17 Feb 2007 15:30:29`` becomes ``an hour ago``.
* ``17 Feb 2007 13:31:29`` becomes ``2 hours ago``.
* ``16 Feb 2007 13:31:29`` becomes ``1 day ago``.
* ``17 Feb 2007 16:30:30`` becomes ``29 seconds from now``.
* ``17 Feb 2007 16:31:00`` becomes ``a minute from now``.
* ``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``.
* ``17 Feb 2007 16:30:29`` becomes ``an hour from now``.
* ``17 Feb 2007 18:31:29`` becomes ``2 hours from now``.
* ``18 Feb 2007 16:31:29`` becomes ``1 day from now``.

.. templatefilter:: ordinal

ordinal
-------

Converts an integer to its ordinal as a string.

Examples:

* ``1`` becomes ``1st``.
* ``2`` becomes ``2nd``.
* ``3`` becomes ``3rd``.

You can pass in either an integer or a string representation of an integer.
