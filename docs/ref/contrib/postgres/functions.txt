======================================
PostgreSQL specific database functions
======================================

All of these functions are available from the
``django.contrib.postgres.functions`` module.

.. currentmodule:: django.contrib.postgres.functions

``RandomUUID``
==============

.. class:: RandomUUID()

Returns a version 4 UUID.

On PostgreSQL < 13, the `pgcrypto extension`_ must be installed. You can use
the :class:`~django.contrib.postgres.operations.CryptoExtension` migration
operation to install it.

.. _pgcrypto extension: https://www.postgresql.org/docs/current/pgcrypto.html

Usage example::

    >>> from django.contrib.postgres.functions import RandomUUID
    >>> Article.objects.update(uuid=RandomUUID())

``Unnest``
==============

.. class:: Unnest()

Returns an array expanded to a set of rows.

Usage example::

    >>> from django.contrib.postgres.functions import Unnest
    >>> quoted_authors = [
    ...     ["J. Derrida", "F. Nietzsche"],
    ...     ["J. Derrida", "F. Nietzsche"],
    ...     ["D. Pennac", "M. de Assis"],
    ...     ["C. D. de Andrade", "J. Kerouac"],
    ...     ["J. Derrida"],
    ...     ["Molière", "C. D. de Andrade"],
    ...     ["D. Pennac", "F. Nietzsche", "M. de Assis"],
    ... ]
    >>> Author.objects.bulk_create(
    ...     [Author(field=author) for author in quoted_authors]
    ... )
    >>> Article.objects.annotate(
    ...     elements=Unnest(
    ...         "field", output_field=ArrayField(CharField(max_length=50)),
    ...     )
    ... )
    ... .values_list("elements", flat=True)
    ... .distinct()
    <QuerySet ['C. D. de Andrade', 'F. Nietzsche', 'J. Kerouac', 'M. de Assis',
    'Molière', 'D. Pennac', 'J. Derrida']>


``TransactionNow``
==================

.. class:: TransactionNow()

Returns the date and time on the database server that the current transaction
started. If you are not in a transaction it will return the date and time of
the current statement. This is a complement to
:class:`django.db.models.functions.Now`, which returns the date and time of the
current statement.

Note that only the outermost call to :func:`~django.db.transaction.atomic()`
sets up a transaction and thus sets the time that ``TransactionNow()`` will
return; nested calls create savepoints which do not affect the transaction
time.

Usage example::

    >>> from django.contrib.postgres.functions import TransactionNow
    >>> Article.objects.filter(published__lte=TransactionNow())
    <QuerySet [<Article: How to Django>]>
