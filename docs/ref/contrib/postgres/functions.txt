======================================
PostgreSQL specific database functions
======================================

All of these functions are available from the
``django.contrib.postgres.functions`` module.

.. currentmodule:: django.contrib.postgres.functions

``TransactionNow``
==================

.. class:: TransactionNow()

.. versionadded:: 1.9

Returns the date and time on the database server that the current transaction
started. If you are not in a transaction it will return the date and time of
the current statement. This is a complement to
:class:`django.db.models.functions.Now`, which returns the date and time of the
current statement.

Note that only the outermost call to :func:`~django.db.transaction.atomic()`
sets up a transaction and thus sets the time that ``TransactionNow()`` will
return; nested calls create savepoints which do not affect the transaction
time.

Usage example::

    >>> from django.contrib.postgres.functions import TransactionNow
    >>> Article.objects.filter(published__lte=TransactionNow())
    <QuerySet [<Article: How to Django>]>

``Levenshtein``
===============

.. class:: Levenshtein(expression, expression, **extra)

.. versionadded:: 1.10

Accepts a field name or expression, and a string or expression. Returns the
Levenshtein distance between the two arguments.

To use it, you need to activate the `fuzzystrmatch extension on PostgreSQL`_.
The :class:`~django.contrib.postgres.operations.FuzzyStrMatchExtension`
migration operation is available if you want to perform this activation using
migrations).

.. _fuzzystrmatch extension on PostgreSQL: http://www.postgresql.org/docs/current/interactive/fuzzystrmatch.html

Usage example::

    >>> from django.contrib.postgres.functions import Levenshtein
    >>> Author.objects.create(name='William')
    >>> print Author.objects.annotate(distance=Levenshtein('name', 'Will')).first().distance
    3
