=================
The redirects app
=================

.. module:: django.contrib.redirects
   :synopsis: A framework for managing redirects.

Django comes with an optional redirects application. It lets you store
redirects in a database and specify the redirect type.

Installation
============

To install the redirects app, follow these steps:

#. Ensure that the ``django.contrib.sites`` framework
   :ref:`is installed <enabling-the-sites-framework>`.
#. Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting.
#. Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'``
   to your :setting:`MIDDLEWARE` setting.
#. Run the command :djadmin:`manage.py migrate <migrate>`.

How it works
============

``manage.py migrate`` creates a ``django_redirect`` table in your database. This
is a lookup table with ``site_id``, ``old_path`` and ``new_path`` fields.

The :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`
does all of the work. Each time any Django application raises a 404
error, this middleware checks the redirects database for the requested
URL as a last resort. Specifically, it checks for a redirect with the
given ``old_path``, ``redirect_type`` and a site ID that corresponds to the
:setting:`SITE_ID` setting.

* If it finds a match, it redirects to ``new_path`` using the chosen ``redirect_type``.
  To add a custom redirect type, you can subclass the
  :class:`django.contrib.redirects.models.Redirect` and override the
  :class:`RedirectTypes` integer choice like in the following example:

      >>> RedirectTypes = IntegerChoices(
      >>>       'RedirectTypes',
      >>>       [
      >>>           ('Permanent Redirect', 308),
      >>>           *[(m.name, m.value) for m in Redirect.RedirectTypes]
      >>>       ],
      >>>   )

  When adding a redirect type, remember also to extend the
  :class:`RedirectFallbackMiddleware`.

  First, set the ``redirect_model_class`` to the model class you just wrote.

  Then, add the new response via the convenient ``response_redirect_types`` method:

      >>> def get_response_redirect_types(self):
      >>>   redirect_types = super().get_response_redirect_types()
      >>>   redirect_types.update({308: HttpResponseRedirect})
      >>>   return redirect_types

  Finally, you are expected to link unregister the :class:`contrib.redirects.admin.RedirectAdmin`
  and register it with the model class you wrote above.

* If it doesn't find a match, the request continues to be processed as
  usual.

The middleware only gets activated for 404s -- not for 500s or responses of any
other status code.

Note that the order of :setting:`MIDDLEWARE` matters. Generally, you can put
:class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` at the
end of the list, because it's a last resort.

For more on middleware, read the :doc:`middleware docs
</topics/http/middleware>`.

How to add, change and delete redirects
=======================================

Via the admin interface
-----------------------

If you've activated the automatic Django admin interface, you should see a
"Redirects" section on the admin index page. Edit redirects as you edit any
other object in the system.

Via the Python API
------------------

.. class:: models.Redirect

    Redirects are represented by a standard :doc:`Django model </topics/db/models>`,
    which lives in :source:`django/contrib/redirects/models.py`. You can access
    redirect objects via the :doc:`Django database API </topics/db/queries>`.
    For example::

        >>> from django.conf import settings
        >>> from django.contrib.redirects.models import Redirect
        >>> # Add a new redirect.
        >>> redirect = Redirect.objects.create(
        ...     site_id=1,
        ...     redirect_type=301,
        ...     old_path='/contact-us/',
        ...     new_path='/contact/',
        ... )
        >>> # Change a redirect.
        >>> redirect.new_path = '/contact-details/'
        >>> redirect.save()
        >>> redirect
        <Redirect: /contact-us/ ---> /contact-details/>
        >>> # Delete a redirect.
        >>> Redirect.objects.filter(site_id=1, old_path='/contact-us/').delete()
        (1, {'redirects.Redirect': 1})

Middleware
==========

.. class:: middleware.RedirectFallbackMiddleware

    You can override redirect types used by the middleware by creating a subclass of
    :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` and
    overriding the ``response_redirect_types`` method.

    .. attribute:: redirect_model_class

        A :class:`django.db.models` class to be used for redirects.

        Defaults to :class:``Redirect``.

    .. attribute:: response_redirect_types

        A dictionary of ``status_code``integer and
        :class:`~django.http.HttpResponse` class pairs.

        Defaults to:

        >>> {
        >>>     301: HttpResponsePermanentRedirect,
        >>>     302: HttpResponseRedirect,
        >>>     410: HttpResponseGone
        >>> }
